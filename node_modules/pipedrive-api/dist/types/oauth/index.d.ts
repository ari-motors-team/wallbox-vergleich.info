/// <reference types="node" />
import EventEmitter from 'events';
export declare class OAuth2 {
    private emitter;
    private baseUrl;
    private authKey;
    private options;
    _isRefreshing: boolean;
    _authState?: {
        accessToken: string;
        refreshToken: string;
        expirationTime: Date;
    } | null;
    constructor(auth: {
        clientId: string;
        clientSecret: string;
        lastKnownAuthState?: {
            accessToken: string;
            refreshToken: string;
            expirationTime: Date;
        };
    }, emitter: EventEmitter, options?: {
        setRefreshManually?: boolean;
        prehook?: Function;
    });
    readonly state: {
        accessToken: string;
        refreshToken: string;
        expirationTime: Date;
    } | null;
    readonly token: string;
    preflight(): Promise<void>;
    revokeToken(token: string, type: 'refresh_token' | 'access_token'): Promise<null>;
    getToken(code: string, redirectUri: string): Promise<{
        accessToken: string;
        refreshToken: string;
        expirationTime: Date;
    }>;
    refreshToken(token: string): Promise<{
        accessToken: string;
        refreshToken: string;
        expirationTime: Date;
    }>;
    private generateExpiredDate;
}
